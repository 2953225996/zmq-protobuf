// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stu_2eproto;
namespace proto {
class stu;
class stuDefaultTypeInternal;
extern stuDefaultTypeInternal _stu_default_instance_;
class stu_TeacherEntry_DoNotUse;
class stu_TeacherEntry_DoNotUseDefaultTypeInternal;
extern stu_TeacherEntry_DoNotUseDefaultTypeInternal _stu_TeacherEntry_DoNotUse_default_instance_;
class stu_subject;
class stu_subjectDefaultTypeInternal;
extern stu_subjectDefaultTypeInternal _stu_subject_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::stu* Arena::CreateMaybeMessage<::proto::stu>(Arena*);
template<> ::proto::stu_TeacherEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::stu_TeacherEntry_DoNotUse>(Arena*);
template<> ::proto::stu_subject* Arena::CreateMaybeMessage<::proto::stu_subject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum stu_sex : int {
  stu_sex_male = 0,
  stu_sex_female = 1,
  stu_sex_stu_sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  stu_sex_stu_sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool stu_sex_IsValid(int value);
constexpr stu_sex stu_sex_sex_MIN = stu_sex_male;
constexpr stu_sex stu_sex_sex_MAX = stu_sex_female;
constexpr int stu_sex_sex_ARRAYSIZE = stu_sex_sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* stu_sex_descriptor();
template<typename T>
inline const std::string& stu_sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, stu_sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function stu_sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    stu_sex_descriptor(), enum_t_value);
}
inline bool stu_sex_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, stu_sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<stu_sex>(
    stu_sex_descriptor(), name, value);
}
// ===================================================================

class stu_subject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.stu.subject) */ {
 public:
  inline stu_subject() : stu_subject(nullptr) {}
  virtual ~stu_subject();

  stu_subject(const stu_subject& from);
  stu_subject(stu_subject&& from) noexcept
    : stu_subject() {
    *this = ::std::move(from);
  }

  inline stu_subject& operator=(const stu_subject& from) {
    CopyFrom(from);
    return *this;
  }
  inline stu_subject& operator=(stu_subject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stu_subject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stu_subject* internal_default_instance() {
    return reinterpret_cast<const stu_subject*>(
               &_stu_subject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(stu_subject& a, stu_subject& b) {
    a.Swap(&b);
  }
  inline void Swap(stu_subject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stu_subject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stu_subject* New() const final {
    return CreateMaybeMessage<stu_subject>(nullptr);
  }

  stu_subject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stu_subject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stu_subject& from);
  void MergeFrom(const stu_subject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stu_subject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.stu.subject";
  }
  protected:
  explicit stu_subject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stu_2eproto);
    return ::descriptor_table_stu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.stu.subject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stu_2eproto;
};
// -------------------------------------------------------------------

class stu_TeacherEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<stu_TeacherEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<stu_TeacherEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  stu_TeacherEntry_DoNotUse();
  explicit stu_TeacherEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const stu_TeacherEntry_DoNotUse& other);
  static const stu_TeacherEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const stu_TeacherEntry_DoNotUse*>(&_stu_TeacherEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.stu.TeacherEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.stu.TeacherEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stu_2eproto);
    return ::descriptor_table_stu_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class stu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.stu) */ {
 public:
  inline stu() : stu(nullptr) {}
  virtual ~stu();

  stu(const stu& from);
  stu(stu&& from) noexcept
    : stu() {
    *this = ::std::move(from);
  }

  inline stu& operator=(const stu& from) {
    CopyFrom(from);
    return *this;
  }
  inline stu& operator=(stu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stu* internal_default_instance() {
    return reinterpret_cast<const stu*>(
               &_stu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(stu& a, stu& b) {
    a.Swap(&b);
  }
  inline void Swap(stu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stu* New() const final {
    return CreateMaybeMessage<stu>(nullptr);
  }

  stu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stu& from);
  void MergeFrom(const stu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.stu";
  }
  protected:
  explicit stu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stu_2eproto);
    return ::descriptor_table_stu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef stu_subject subject;

  typedef stu_sex sex;
  static constexpr sex male =
    stu_sex_male;
  static constexpr sex female =
    stu_sex_female;
  static inline bool sex_IsValid(int value) {
    return stu_sex_IsValid(value);
  }
  static constexpr sex sex_MIN =
    stu_sex_sex_MIN;
  static constexpr sex sex_MAX =
    stu_sex_sex_MAX;
  static constexpr int sex_ARRAYSIZE =
    stu_sex_sex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  sex_descriptor() {
    return stu_sex_descriptor();
  }
  template<typename T>
  static inline const std::string& sex_Name(T enum_t_value) {
    static_assert(::std::is_same<T, sex>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function sex_Name.");
    return stu_sex_Name(enum_t_value);
  }
  static inline bool sex_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      sex* value) {
    return stu_sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectsFieldNumber = 4,
    kTeacherFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kGenderFieldNumber = 3,
  };
  // repeated .proto.stu.subject subjects = 4;
  int subjects_size() const;
  private:
  int _internal_subjects_size() const;
  public:
  void clear_subjects();
  ::proto::stu_subject* mutable_subjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::stu_subject >*
      mutable_subjects();
  private:
  const ::proto::stu_subject& _internal_subjects(int index) const;
  ::proto::stu_subject* _internal_add_subjects();
  public:
  const ::proto::stu_subject& subjects(int index) const;
  ::proto::stu_subject* add_subjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::stu_subject >&
      subjects() const;

  // map<string, string> teacher = 5;
  int teacher_size() const;
  private:
  int _internal_teacher_size() const;
  public:
  void clear_teacher();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_teacher() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_teacher();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      teacher() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_teacher();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .proto.stu.sex gender = 3;
  void clear_gender();
  ::proto::stu_sex gender() const;
  void set_gender(::proto::stu_sex value);
  private:
  ::proto::stu_sex _internal_gender() const;
  void _internal_set_gender(::proto::stu_sex value);
  public:

  // @@protoc_insertion_point(class_scope:proto.stu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::stu_subject > subjects_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      stu_TeacherEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > teacher_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// stu_subject

// string name = 1;
inline void stu_subject::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& stu_subject::name() const {
  // @@protoc_insertion_point(field_get:proto.stu.subject.name)
  return _internal_name();
}
inline void stu_subject::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.stu.subject.name)
}
inline std::string* stu_subject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.stu.subject.name)
  return _internal_mutable_name();
}
inline const std::string& stu_subject::_internal_name() const {
  return name_.Get();
}
inline void stu_subject::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void stu_subject::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.stu.subject.name)
}
inline void stu_subject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.stu.subject.name)
}
inline void stu_subject::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.stu.subject.name)
}
inline std::string* stu_subject::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* stu_subject::release_name() {
  // @@protoc_insertion_point(field_release:proto.stu.subject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void stu_subject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.stu.subject.name)
}

// uint64 score = 2;
inline void stu_subject::clear_score() {
  score_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 stu_subject::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 stu_subject::score() const {
  // @@protoc_insertion_point(field_get:proto.stu.subject.score)
  return _internal_score();
}
inline void stu_subject::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  score_ = value;
}
inline void stu_subject::set_score(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:proto.stu.subject.score)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// stu

// uint64 id = 1;
inline void stu::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 stu::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 stu::id() const {
  // @@protoc_insertion_point(field_get:proto.stu.id)
  return _internal_id();
}
inline void stu::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void stu::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.stu.id)
}

// string name = 2;
inline void stu::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& stu::name() const {
  // @@protoc_insertion_point(field_get:proto.stu.name)
  return _internal_name();
}
inline void stu::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.stu.name)
}
inline std::string* stu::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.stu.name)
  return _internal_mutable_name();
}
inline const std::string& stu::_internal_name() const {
  return name_.Get();
}
inline void stu::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void stu::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.stu.name)
}
inline void stu::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.stu.name)
}
inline void stu::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.stu.name)
}
inline std::string* stu::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* stu::release_name() {
  // @@protoc_insertion_point(field_release:proto.stu.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void stu::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.stu.name)
}

// .proto.stu.sex gender = 3;
inline void stu::clear_gender() {
  gender_ = 0;
}
inline ::proto::stu_sex stu::_internal_gender() const {
  return static_cast< ::proto::stu_sex >(gender_);
}
inline ::proto::stu_sex stu::gender() const {
  // @@protoc_insertion_point(field_get:proto.stu.gender)
  return _internal_gender();
}
inline void stu::_internal_set_gender(::proto::stu_sex value) {
  
  gender_ = value;
}
inline void stu::set_gender(::proto::stu_sex value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:proto.stu.gender)
}

// repeated .proto.stu.subject subjects = 4;
inline int stu::_internal_subjects_size() const {
  return subjects_.size();
}
inline int stu::subjects_size() const {
  return _internal_subjects_size();
}
inline void stu::clear_subjects() {
  subjects_.Clear();
}
inline ::proto::stu_subject* stu::mutable_subjects(int index) {
  // @@protoc_insertion_point(field_mutable:proto.stu.subjects)
  return subjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::stu_subject >*
stu::mutable_subjects() {
  // @@protoc_insertion_point(field_mutable_list:proto.stu.subjects)
  return &subjects_;
}
inline const ::proto::stu_subject& stu::_internal_subjects(int index) const {
  return subjects_.Get(index);
}
inline const ::proto::stu_subject& stu::subjects(int index) const {
  // @@protoc_insertion_point(field_get:proto.stu.subjects)
  return _internal_subjects(index);
}
inline ::proto::stu_subject* stu::_internal_add_subjects() {
  return subjects_.Add();
}
inline ::proto::stu_subject* stu::add_subjects() {
  // @@protoc_insertion_point(field_add:proto.stu.subjects)
  return _internal_add_subjects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::stu_subject >&
stu::subjects() const {
  // @@protoc_insertion_point(field_list:proto.stu.subjects)
  return subjects_;
}

// map<string, string> teacher = 5;
inline int stu::_internal_teacher_size() const {
  return teacher_.size();
}
inline int stu::teacher_size() const {
  return _internal_teacher_size();
}
inline void stu::clear_teacher() {
  teacher_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
stu::_internal_teacher() const {
  return teacher_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
stu::teacher() const {
  // @@protoc_insertion_point(field_map:proto.stu.teacher)
  return _internal_teacher();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
stu::_internal_mutable_teacher() {
  return teacher_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
stu::mutable_teacher() {
  // @@protoc_insertion_point(field_mutable_map:proto.stu.teacher)
  return _internal_mutable_teacher();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::stu_sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::stu_sex>() {
  return ::proto::stu_sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stu_2eproto
